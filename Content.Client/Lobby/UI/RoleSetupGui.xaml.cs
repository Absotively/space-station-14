using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using Content.Client.Administration.UI.Notes;
using Content.Client.Humanoid;
using Content.Client.Info;
using Content.Client.Info.PlaytimeStats;
using Content.Client.Lobby.UI.Loadouts;
using Content.Client.Lobby.UI.Roles;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Resources;
using Content.Shared.CCVar;
using Content.Shared.Clothing;
using Content.Shared.GameTicking;
using Content.Shared.Guidebook;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controllers;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.ContentPack;
using Robust.Shared.Enums;
using Robust.Shared.Log;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using System.IO;
using System.Linq;
using System.Numerics;
using Content.Client.Humanoid;
using Content.Client.Lobby.UI.Loadouts;
using Content.Client.Lobby.UI.Roles;
using Content.Client.Message;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Sprite;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.CCVar;
using Content.Shared.Clothing;
using Content.Shared.GameTicking;
using Content.Shared.Guidebook;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Roles;
using Content.Shared.Traits;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.ContentPack;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Content.Client.Lobby.UI
{
    /// <summary>
    /// Holds the role setup GUI
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class RoleSetupGui : Control
    {
        [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;
        [Dependency] private readonly IEntityManager _entManager = default!;
        [Dependency] private readonly IPrototypeManager _protomanager = default!;
        [Dependency] private readonly IResourceCache _resourceCache = default!;
        [Dependency] private readonly IConfigurationManager _cfg = default!;
        private readonly IFileDialogManager _dialogManager;
        private readonly JobRequirementsManager _requirements;

        private bool _exporting;

        /// <summary>
        /// If we're attempting to save.
        /// </summary>
        public event Action? Save;

        private List<(string, RequirementsSelector)> _jobPrioritySelectors = new();

        private readonly Dictionary<string, BoxContainer> _jobCategories;

        /// <summary>
        /// The work in progress copy of the preferences being edited.
        /// </summary>
        public RolePreferences? RolePreferences;

        private bool _isDirty;

        public event Action<List<ProtoId<GuideEntryPrototype>>>? OnOpenGuidebook;

        private ISawmill _sawmill;

        public RoleSetupGui(
            IFileDialogManager dialogManager,
            ILogManager logManager,
            JobRequirementsManager requirements)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            _sawmill = logManager.GetSawmill("role.editor");
            _dialogManager = dialogManager;
            _requirements = requirements;

            var panelTex = _resourceCache.GetTexture("/Textures/Interface/Nano/button.svg.96dpi.png");
            var back = new StyleBoxTexture
            {
                Texture = panelTex,
                Modulate = new Color(37, 37, 42)
            };
            back.SetPatchMargin(StyleBox.Margin.All, 10);

            BackgroundPanel.PanelOverride = back;

            RulesButton.OnPressed += _ => new RulesAndInfoWindow().Open();

            StatsButton.OnPressed += _ => new PlaytimeStatsWindow().OpenCentered();

            _cfg.OnValueChanged(CCVars.SeeOwnNotes, p => AdminRemarksButton.Visible = p, true);

            ImportButton.OnPressed += args =>
            {
                ImportRoles();
            };

            ExportButton.OnPressed += args =>
            {
                ExportRoles();
            };

            ResetButton.OnPressed += args =>
            {
                Reload();
            };

            SaveButton.OnPressed += args =>
            {
                Save?.Invoke();
            };

            #region Left

            #region Jobs

            TabContainer.SetTabTitle(0, Loc.GetString("role-setup-gui-jobs-tab"));

            PreferenceUnavailableButton.AddItem(
                Loc.GetString("role-setup-gui-preference-unavailable-stay-in-lobby-button"),
                (int)PreferenceUnavailableMode.StayInLobby);
            PreferenceUnavailableButton.AddItem(
                Loc.GetString("role-setup-gui-preference-unavailable-spawn-as-overflow-button",
                              ("overflowJob", Loc.GetString(SharedGameTicker.FallbackOverflowJobName))),
                (int)PreferenceUnavailableMode.SpawnAsOverflow);

            PreferenceUnavailableButton.OnItemSelected += args =>
            {
                PreferenceUnavailableButton.SelectId(args.Id);
                RolePreferences = RolePreferences?.WithPreferenceUnavailable((PreferenceUnavailableMode)args.Id);
                SetDirty();
            };

            _jobCategories = new Dictionary<string, BoxContainer>();

            RefreshAntags();
            RefreshJobs();

            #endregion Jobs

            TabContainer.SetTabTitle(1, Loc.GetString("role-setup-gui-antags-tab"));

            #endregion Left

            IsDirty = false;
        }
        public bool IsDirty
        {
            get => _isDirty;
            set
            {
                if (_isDirty == value)
                    return;

                _isDirty = value;
                UpdateSaveButton();
            }
        }
        public void RefreshAntags()
        {
            AntagList.DisposeAllChildren();
            var items = new[]
            {
                ("role-setup-gui-antag-preference-yes-button", 0),
                ("role-setup-gui-antag-preference-no-button", 1)
            };

            foreach (var antag in _protomanager.EnumeratePrototypes<AntagPrototype>().OrderBy(a => Loc.GetString(a.Name)))
            {
                if (!antag.SetPreference)
                    continue;

                var antagContainer = new BoxContainer()
                {
                    Orientation = LayoutOrientation.Horizontal,
                };

                var selector = new RequirementsSelector()
                {
                    Margin = new Thickness(3f, 3f, 3f, 0f),
                };
                selector.OnOpenGuidebook += OnOpenGuidebook;

                var title = Loc.GetString(antag.Name);
                var description = Loc.GetString(antag.Objective);
                selector.Setup(items, title, 250, description, guides: antag.Guides);
                selector.Select(RolePreferences?.AntagPreferences.Contains(antag.ID) == true ? 0 : 1);

                // TODO: make some way for the player to see which reason is for which character?
                // TODO: figure out the right handling for if _preferencesManager.Preferences is null
                var requirements = _entManager.System<SharedRoleSystem>().GetAntagRequirement(antag);
                var hasSuitableCharacter = false;
                var lockReasons = new FormattedMessage();
                if (_preferencesManager.Preferences != null) {
                    foreach (var character in _preferencesManager.Preferences.Characters.Values)
                    {
                        if (_requirements.CheckRoleRequirements(requirements, (HumanoidCharacterProfile)character, out var reason))
                        {
                            hasSuitableCharacter = true;
                            break;
                        }
                        else
                        {
                            lockReasons.AddMessage(reason);
                        }
                    }
                }
                if (!hasSuitableCharacter)
                {
                    selector.LockRequirements(lockReasons);
                    RolePreferences = RolePreferences?.WithAntagPreference(antag, false);
                    SetDirty();
                }
                else
                {
                    selector.UnlockRequirements();
                }

                selector.OnSelected += preference =>
                {
                    RolePreferences = RolePreferences?.WithAntagPreference(antag.ID, preference == 0);
                    SetDirty();
                };

                antagContainer.AddChild(selector);

                AntagList.AddChild(antagContainer);
            }
        }

        /// <summary>
        /// Refreshes all job selectors.
        /// </summary>
        public void RefreshJobs()
        {
            JobList.DisposeAllChildren();
            _jobCategories.Clear();
            _jobPrioritySelectors.Clear();
            var firstCategory = true;

            // Get all displayed departments
            var departments = new List<DepartmentPrototype>();
            foreach (var department in _protomanager.EnumeratePrototypes<DepartmentPrototype>())
            {
                if (department.EditorHidden)
                    continue;

                departments.Add(department);
            }

            departments.Sort(DepartmentUIComparer.Instance);

            var items = new[]
            {
                ("role-setup-gui-job-priority-never-button", (int) JobPriority.Never),
                ("role-setup-gui-job-priority-low-button", (int) JobPriority.Low),
                ("role-setup-gui-job-priority-medium-button", (int) JobPriority.Medium),
                ("role-setup-gui-job-priority-high-button", (int) JobPriority.High),
            };

            foreach (var department in departments)
            {
                var departmentName = Loc.GetString(department.Name);

                if (!_jobCategories.TryGetValue(department.ID, out var category))
                {
                    category = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Vertical,
                        Name = department.ID,
                        ToolTip = Loc.GetString("role-setup-gui-jobs-amount-in-department-tooltip",
                            ("departmentName", departmentName))
                    };

                    if (firstCategory)
                    {
                        firstCategory = false;
                    }
                    else
                    {
                        category.AddChild(new Control
                        {
                            MinSize = new Vector2(0, 23),
                        });
                    }

                    category.AddChild(new PanelContainer
                    {
                        PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex("#464966") },
                        Children =
                        {
                            new Label
                            {
                                Text = Loc.GetString("role-setup-gui-department-jobs-label",
                                    ("departmentName", departmentName)),
                                Margin = new Thickness(5f, 0, 0, 0)
                            }
                        }
                    });

                    _jobCategories[department.ID] = category;
                    JobList.AddChild(category);
                }

                var jobs = department.Roles.Select(jobId => _protomanager.Index(jobId))
                    .Where(job => job.SetPreference)
                    .ToArray();

                Array.Sort(jobs, JobUIComparer.Instance);

                foreach (var job in jobs)
                {
                    var jobContainer = new BoxContainer()
                    {
                        Orientation = LayoutOrientation.Horizontal,
                    };

                    var selector = new RequirementsSelector()
                    {
                        Margin = new Thickness(3f, 3f, 3f, 0f),
                    };
                    selector.OnOpenGuidebook += OnOpenGuidebook;

                    var icon = new TextureRect
                    {
                        TextureScale = new Vector2(2, 2),
                        VerticalAlignment = VAlignment.Center
                    };
                    var jobIcon = _protomanager.Index(job.Icon);
                    icon.Texture = jobIcon.Icon.Frame0();
                    selector.Setup(items, job.LocalizedName, 200, job.LocalizedDescription, icon, job.Guides);

                    if (!_requirements.IsAllowed(job, (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter, out var reason))
                    {
                        selector.LockRequirements(reason);
                    }
                    else
                    {
                        selector.UnlockRequirements();
                    }

                    selector.OnSelected += selectedPrio =>
                    {
                        var selectedJobPrio = (JobPriority)selectedPrio;
                        RolePreferences = RolePreferences?.WithJobPriority(job.ID, selectedJobPrio);

                        foreach (var (jobId, other) in _jobPrioritySelectors)
                        {
                            // Sync other selectors with the same job in case of multiple department jobs
                            if (jobId == job.ID)
                            {
                                other.Select(selectedPrio);
                                continue;
                            }

                            if (selectedJobPrio != JobPriority.High || (JobPriority)other.Selected != JobPriority.High)
                                continue;

                            // Lower any other high priorities to medium.
                            other.Select((int)JobPriority.Medium);
                            RolePreferences = RolePreferences?.WithJobPriority(jobId, JobPriority.Medium);
                        }

                        UpdateJobPriorities();
                        SetDirty();
                    };

                    _jobPrioritySelectors.Add((job.ID, selector));
                    jobContainer.AddChild(selector);
                    category.AddChild(jobContainer);
                }
            }

            UpdateJobPriorities();
        }

        /// <summary>
        /// Updates selected job priorities to the profile's.
        /// </summary>
        private void UpdateJobPriorities()
        {
            foreach (var (jobId, prioritySelector) in _jobPrioritySelectors)
            {
                var priority = RolePreferences?.JobPriorities.GetValueOrDefault(jobId, JobPriority.Never) ?? JobPriority.Never;
                prioritySelector.Select((int)priority);
            }
        }

        /// <summary>
        /// Resets the profile to the defaults.
        /// </summary>
        public void Reload()
        {
            if (_preferencesManager.Preferences != null)
            {
                RolePreferences = new RolePreferences(_preferencesManager.Preferences.RolePreferences);
            }
            else
            {
                RolePreferences = null;
            }
            IsDirty = false;

            UpdateSaveButton();

            RefreshAntags();
            RefreshJobs();

            if (RolePreferences != null)
            {
                PreferenceUnavailableButton.SelectId((int)RolePreferences.PreferenceUnavailable);
            }
            // TODO: use preference unavailable default if Preference is null
        }

        private void SetDirty()
        {
            if (RolePreferences == null || _preferencesManager.Preferences?.RolePreferences.MemberwiseEquals(RolePreferences) == true)
            {
                IsDirty = false;
                return;
            }

            IsDirty = true;

        }
        private void UpdateSaveButton()
        {
            SaveButton.Disabled = !IsDirty;
            ResetButton.Disabled = !IsDirty;
        }

        // TODO: actually implement import/export
        private async void ImportRoles()
        {
            if (_exporting)
                return;

            StartExport();
            await using var file = await _dialogManager.OpenFile(new FileDialogFilters(new FileDialogFilters.Group("yml")));

            if (file == null)
            {
                EndExport();
                return;
            }

            try
            {
            //    var profile = _entManager.System<HumanoidAppearanceSystem>().FromStream(file, _playerManager.LocalSession!);
            //    var oldProfile = Profile;
            //    SetProfile(profile, CharacterSlot);

            //    IsDirty = !profile.MemberwiseEquals(oldProfile);
            }
            catch (Exception exc)
            {
                _sawmill.Error($"Error when importing role preferences\n{exc.StackTrace}");
            }
            finally
            {
                EndExport();
            }
        }

        private async void ExportRoles()
        {
            if (RolePreferences == null || _exporting)
                return;

            StartExport();
            var file = await _dialogManager.SaveFile(new FileDialogFilters(new FileDialogFilters.Group("yml")));

            if (file == null)
            {
                EndExport();
                return;
            }

            try
            {
            //    var dataNode = _entManager.System<HumanoidAppearanceSystem>().ToDataNode(RolePreferences);
            //    await using var writer = new StreamWriter(file.Value.fileStream);
            //    dataNode.Write(writer);
            }
            catch (Exception exc)
            {
                _sawmill.Error($"Error when exporting role preferences\n{exc.StackTrace}");
            }
            finally
            {
                EndExport();
                await file.Value.fileStream.DisposeAsync();
            }
        }

        private void StartExport()
        {
            _exporting = true;
            ImportButton.Disabled = true;
            ExportButton.Disabled = true;
        }

        private void EndExport()
        {
            _exporting = false;
        //    ImportButton.Disabled = false;
        //    ExportButton.Disabled = false;
        }
    }
}
